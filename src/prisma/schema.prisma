generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ******************************************************************************************************
// Authentication model
// ******************************************************************************************************
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ******************************************************************************************************
// Application model
// ******************************************************************************************************
enum CategoryType {
  Expense
  Income
}

model Category {
  id   String       @id @default(auto()) @map("_id") @db.ObjectId
  name String
  type CategoryType

  parentId String?    @unique @db.ObjectId
  Parent   Category?  @relation("CategoryParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Children Category[] @relation("CategoryParent")

  Income  Income[]
  Expense Expense[]
}

model Expense {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  amount     Int
  date       DateTime @db.Date
  note       String?
  categoryId String   @db.ObjectId

  Category Category @relation(fields: [categoryId], references: [id], onDelete: SetNull)
}

model Income {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  amount     Int
  categoryId String
  date       DateTime @db.Date
  note       String?

  Category Category @relation(fields: [categoryId], references: [id], onDelete: SetNull)
}
